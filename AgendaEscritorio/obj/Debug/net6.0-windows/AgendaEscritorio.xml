<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgendaEscritorio</name>
    </assembly>
    <members>
        <member name="T:AgendaEscritorio.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:AgendaEscritorio.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:AgendaEscritorio.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:AgendaEscritorio.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:AgendaEscritorio.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AgendaEscritorio.service.Client">
            <summary>
            Clase que maneja la conexión cliente-servidor y la gestión de información del usuario.
            </summary>
        </member>
        <member name="P:AgendaEscritorio.service.Client.IsAdmin">
            <summary>
            Propiedad que indica si el usuario tiene permisos de administrador.
            Solo tiene un setter privado, se asigna internamente.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SetSessionToken(System.String)">
            <summary>
            Establece el token de sesión para el usuario.
            </summary>
            <param name="token">El token de sesión a establecer.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.GetSessionToken">
            <summary>
            Obtiene el token de sesión actual.
            </summary>
            <returns>El token de sesión.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.#ctor">
            <summary>
            Constructor de la clase <see cref="T:AgendaEscritorio.service.Client"/>.
            Inicializa el servicio de criptografía para ser utilizado en las operaciones relacionadas con la seguridad.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendClientPublicKeyAsync">
            <summary>
            Envía la clave pública del cliente al servidor de forma asincrónica.
            Establece la comunicación con el servidor para enviar la clave pública y procesar la respuesta recibida.
            </summary>
            <returns>Una tarea asincrónica que representa el envío de la clave pública y el procesamiento de la respuesta del servidor.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessEncryptedAESKeyAsync(System.String)">
            <summary>
            Procesa la clave AES encriptada recibida en la respuesta.
            Extrae la longitud de la clave, la desencripta usando la clave privada del cliente,
            y luego la almacena en el servicio de criptografía.
            </summary>
            <param name="response">La respuesta que contiene la clave AES encriptada en formato Base64.</param>
            <returns>Una tarea asincrónica que representa el proceso de desencriptación y almacenamiento de la clave AES.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ConnectAsync">
            <summary>
            Establece una conexión asincrónica con el servidor.
            Si ya está conectado, no intenta reconectar.
            </summary>
            <returns>Una tarea que representa la operación asincrónica.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendCustomPacketAsync(System.String)">
            <summary>
            Asynchronously sends a custom packet to the server.
            </summary>
            <param name="customPacket">The custom packet to send.</param>
            <returns>Returns true if the packet was sent successfully, false otherwise.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendLoginAsync(System.String,System.String)">
            <summary>
            Envía de forma asincrónica una solicitud de inicio de sesión al servidor con el nombre de usuario y contraseña proporcionados.
            </summary>
            <param name="username">El nombre de usuario para iniciar sesión.</param>
            <param name="password">La contraseña para iniciar sesión.</param>
            <returns>Devuelve true si el inicio de sesión fue exitoso, false en caso contrario.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessLoginResponseAsync(System.String)">
            <summary>
            Procesa la respuesta de inicio de sesión recibida del servidor.
            </summary>
            <param name="response">El mensaje de respuesta del servidor.</param>
            <returns>Devuelve true si el inicio de sesión es exitoso, false en caso contrario.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendHelpRequestAsync">
            <summary>
            Envía de forma asincrónica una solicitud de ayuda al servidor.
            </summary>
            <returns>Devuelve true si la solicitud fue exitosa, false en caso contrario.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestUserDataAsync(System.String,System.String,System.String)">
            <summary>
            Solicita de forma asincrónica los datos del usuario al servidor utilizando el token de sesión y el nombre de usuario.
            La solicitud y la respuesta están cifradas utilizando AES.
            </summary>
            <param name="sessionToken">El token de sesión para autenticar la solicitud.</param>
            <param name="username">El nombre de usuario para el cual se solicitan los datos.</param>
            <param name="nombre2">Un nombre de usuario secundario (utilizado para procesamiento o validación adicional).</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessUserDataResponse(System.String)">
            <summary>
            Procesa la respuesta de datos de usuario recibida del servidor.
            </summary>
            <param name="response">El mensaje de respuesta que contiene los datos del usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendLogoutAsync">
            <summary>
            Sends a logout request to the server with AES encryption.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessLogoutResponse(System.String)">
            <summary>
            Procesa la respuesta de cierre de sesión recibida del servidor.
            </summary>
            <param name="response">El mensaje de respuesta del servidor después de la solicitud de cierre de sesión.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendShutdownRequestAsync(System.String,System.String,System.String)">
            <summary>
            Envía una solicitud de apagado al servidor de forma asincrónica.
            Construye un paquete de apagado utilizando el nombre de usuario, la contraseña y el token de sesión,
            luego encripta el paquete y lo envía al servidor. Después procesa la respuesta encriptada recibida del servidor.
            </summary>
            <param name="username">El nombre de usuario que solicita el apagado del servidor.</param>
            <param name="password">La contraseña asociada al nombre de usuario para la autenticación.</param>
            <param name="sessionToken">El token de sesión válido para autenticar la solicitud.</param>
            <returns>Una tarea asincrónica que representa el envío de la solicitud de apagado y el procesamiento de la respuesta del servidor.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestChangeFullNameAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously sends a request to change the user's full name on the server. The request and response are encrypted using AES.
            </summary>
            <param name="sessionToken">The session token for authentication.</param>
            <param name="usernameToChange">The username whose full name is to be changed.</param>
            <param name="newFullName">The new full name for the user.</param>
            <returns>Returns a Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessChangeFullNameResponse(System.String)">
            <summary>
            Procesa la respuesta recibida al intentar cambiar el nombre completo de un usuario.
            </summary>
            <param name="response">La respuesta recibida del servidor, como una cadena de texto.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestAddPermissionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Solicita la adición de un permiso a un usuario específico. Los datos de la solicitud y respuesta están cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión para validar la solicitud.</param>
            <param name="username">El nombre de usuario al que se le va a agregar el permiso.</param>
            <param name="roleToAdd">El nombre del rol que se va a agregar al usuario.</param>
            <param name="permissions">Los permisos que se van a asignar al rol.</param>
            <returns>Una tarea que representa la operación asíncrona.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessAddPermissionResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor tras la solicitud de adición de permiso.
            </summary>
            <param name="response">La respuesta desencriptada recibida del servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestDeleteRoleAsync(System.String,System.String,System.String)">
            <summary>
            Solicita la eliminación de un rol para un usuario de forma asincrónica.
            Construye un paquete de solicitud para eliminar el rol, lo encripta con AES y lo envía al servidor.
            Luego, procesa la respuesta del servidor para determinar el éxito o fracaso de la operación.
            </summary>
            <param name="sessionToken">El token de sesión válido para autenticar la solicitud.</param>
            <param name="username">El nombre de usuario al que se le va a eliminar el rol.</param>
            <param name="rolAEliminar">El nombre del rol que se va a eliminar.</param>
            <returns>Una tarea asincrónica que representa la solicitud de eliminación del rol y el procesamiento de la respuesta del servidor.
            Devuelve <c>true</c> si el rol fue eliminado correctamente, o <c>false</c> en caso contrario.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessDeleteRoleResponse(System.String)">
            <summary>
            Procesa la respuesta recibida del servidor después de solicitar la eliminación de un rol.
            Valida el protocolo, la acción, y el token recibido, asegurándose de que corresponda con la sesión actual.
            </summary>
            <param name="response">La respuesta en texto del servidor, que incluye el protocolo, la acción y el token.</param>
            <returns>Devuelve <c>true</c> si la eliminación del rol fue exitosa, o <c>false</c> en caso de error o discrepancia en los datos.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestGetPermissionsAsync(System.String,System.String)">
            <summary>
            Solicita al servidor los permisos de un usuario específico. Los datos se envían y reciben cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="username">El nombre de usuario al que se le desean obtener los permisos.</param>
            <returns>Un diccionario con los permisos del usuario.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessGetPermissionsResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Procesa una lista de respuestas del servidor y extrae los permisos de los roles.
            </summary>
            <param name="responses">Lista de respuestas del servidor que contienen información de permisos.</param>
            <returns>Un diccionario con los roles y sus permisos.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendEditPermissionsAsync(System.String,System.String,System.String,System.Boolean[])">
            <summary>
            Envía una solicitud al servidor para editar los permisos de un usuario. Los datos se envían y reciben cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="username">El nombre de usuario cuyo rol y permisos se van a editar.</param>
            <param name="rol">El rol que se asignará al usuario.</param>
            <param name="permisos">El arreglo de permisos (booleanos) que se asignarán al rol del usuario.</param>
            <returns>Un código de respuesta del servidor (éxito o error).</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendModoGestionAsync(System.String,System.String)">
            <summary>
            Envía una solicitud al servidor para activar o desactivar el modo gestión. Los datos se envían cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="username">El nombre del usuario que activa o desactiva el modo gestión.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestChangeOtherDataAsync(System.String,System.String,System.String)">
            <summary>
            Envía una solicitud asincrónica al servidor para cambiar otros datos de un usuario específico.
            Los datos se envían y reciben cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión que identifica al usuario conectado.</param>
            <param name="usernameToChange">El nombre de usuario cuyo "otros datos" serán modificados.</param>
            <param name="newOtherData">Los nuevos datos que se desean asignar al usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessChangeOtherDataResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor después de solicitar el cambio de otros datos de un usuario.
            </summary>
            <param name="response">La respuesta recibida del servidor que indica el resultado de la solicitud.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestChangeBirthDateAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Solicita el cambio de la fecha de nacimiento de un usuario al servidor.
            Los datos se envían y reciben cifrados con AES.
            </summary>
            <param name="sessionToken">El token de sesión actual para validar la solicitud.</param>
            <param name="usernameToChange">El nombre de usuario al que se le cambiará la fecha de nacimiento.</param>
            <param name="newBirthDate">La nueva fecha de nacimiento que se desea asignar.</param>
            <param name="connectedUsername">El nombre de usuario conectado que realiza la solicitud, usado para validar permisos.</param>
            <returns>Una tarea que representa la operación asincrónica.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessChangeBirthDateResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor después de solicitar un cambio de fecha de nacimiento.
            </summary>
            <param name="response">La respuesta del servidor que contiene el código de resultado.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestChangePasswordAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Solicita el cambio de contraseña de un usuario específico con cifrado AES.
            </summary>
            <param name="sessionToken">El token de sesión que autentica la solicitud.</param>
            <param name="usernameToEdit">El nombre de usuario cuya contraseña se desea cambiar.</param>
            <param name="currentPassword">La contraseña actual del usuario.</param>
            <param name="newPassword">La nueva contraseña para el usuario.</param>
            <param name="connectedUsername">El nombre de usuario conectado que está realizando la solicitud (debe ser un administrador o el propio usuario).</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessChangeFullPassword(System.String)">
            <summary>
            Procesa la respuesta del servidor después de una solicitud de cambio de contraseña.
            </summary>
            <param name="response">La respuesta recibida del servidor, que contiene información sobre el resultado del cambio de contraseña.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestDeleteUserAsync(System.String,System.String,System.String)">
            <summary>
            Solicita la eliminación de un usuario en el servidor.
            </summary>
            <param name="sessionToken">El token de sesión actual del usuario conectado, usado para autenticar la solicitud.</param>
            <param name="usernameToDelete">El nombre de usuario del usuario que se desea eliminar.</param>
            <param name="connectedUsername">El nombre de usuario del usuario conectado, usado para verificar si tiene permisos para eliminar al otro usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessDeleteUserResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor después de solicitar la eliminación de un usuario.
            </summary>
            <param name="response">La respuesta recibida del servidor, que contiene el código de estado y posible mensaje de error o éxito.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestShowUsersAsync(System.String,System.String)">
            <summary>
            Solicita la lista de usuarios al servidor de manera asincrónica.
            Envía una solicitud cifrada al servidor, recibe y procesa las respuestas,
            y finalmente retorna la lista de usuarios encontrados.
            </summary>
            <param name="sessionToken">El token de sesión válido para autenticar la solicitud.</param>
            <param name="username">El nombre de usuario del que se solicita la lista de usuarios.</param>
            <returns>Una tarea asincrónica que representa la solicitud y procesamiento de los usuarios.
            Devuelve una lista de cadenas que contiene la información de los usuarios, o una lista vacía si no se encuentran usuarios.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessShowUsersResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para mostrar la información de un usuario en formato legible.
            Extrae los datos de un paquete de tipo 239 (información de usuario) y los formatea para su visualización.
            </summary>
            <param name="response">La respuesta del servidor que contiene los datos del usuario en un formato codificado.</param>
            <returns>Una cadena formateada con la información del usuario, incluyendo el nombre de usuario, el nombre completo y el rol.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestCreateUserAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Solicita la creación de un nuevo usuario al servidor.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado, usado para autenticar la solicitud.</param>
            <param name="username">El nombre de usuario que se desea crear.</param>
            <param name="nombreUsuario">El nombre de usuario (nombre de acceso) para la nueva cuenta.</param>
            <param name="password">La contraseña asociada al nuevo usuario.</param>
            <param name="nombreCompleto">El nombre completo del nuevo usuario.</param>
            <param name="fechaNacimiento">La fecha de nacimiento del nuevo usuario.</param>
            <param name="otrosDatos">Cualquier otro dato adicional relevante para el usuario.</param>
            <param name="rolPermisos">El rol y los permisos que tendrá el nuevo usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessCreateUserResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor después de intentar crear un usuario.
            </summary>
            <param name="response">La respuesta recibida del servidor que contiene el estado de la solicitud de creación de usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestShowAgendaAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Solicita al servidor la agenda de un usuario o de un grupo, dependiendo de si la agenda es grupal o individual.
            La solicitud es enviada al servidor encriptada, y la respuesta es procesada posteriormente.
            </summary>
            <param name="sessionToken">El token de sesión que autentica la solicitud del cliente.</param>
            <param name="username">El nombre de usuario que solicita la agenda.</param>
            <param name="isGrupal">Indica si la agenda solicitada es para un grupo o para un usuario individual.</param>
            <param name="groupName">El nombre del grupo, si la agenda solicitada es para un grupo. Este parámetro es opcional.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessShowAgendaResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Procesa las respuestas recibidas del servidor relacionadas con la solicitud de mostrar la agenda.
            Solo guarda los datos de los paquetes en los que el campo IsNeverEdited es 0 (es decir, eventos que han sido modificados).
            </summary>
            <param name="responses">Lista de respuestas recibidas del servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestAdvanceMonthAsync(System.String,System.String)">
            <summary>
            Solicita al servidor avanzar un mes en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessAdvanceMonthResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor tras solicitar avanzar un mes en la agenda.
            </summary>
            <param name="response">Respuesta desencriptada del servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestGoBackMonthAsync(System.String,System.String)">
            <summary>
            Solicita al servidor retroceder un mes en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessGoBackMonthResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor relacionada con la solicitud de retroceder al mes anterior en la agenda.
            Dependiendo del código recibido en la respuesta, se maneja el error correspondiente o se confirma el inicio de la muestra de la agenda.
            </summary>
            <param name="response">La respuesta recibida del servidor que indica el resultado de la solicitud para retroceder de mes.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestAdvanceYearAsync(System.String,System.String)">
            <summary>
            Solicita al servidor avanzar un año en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessAdvanceYearResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor relacionada con la solicitud de avanzar al siguiente año en la agenda.
            Dependiendo del código recibido en la respuesta, se maneja el error correspondiente o se confirma el avance exitoso del año.
            </summary>
            <param name="response">La respuesta recibida del servidor que indica el resultado de la solicitud para avanzar de año.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestGoBackYearAsync(System.String,System.String)">
            <summary>
            Solicita al servidor retroceder un año en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessGoBackYearResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor relacionada con la solicitud de retroceder un año en la agenda.
            Dependiendo del código recibido en la respuesta, se maneja el error correspondiente o se confirma el retroceso exitoso del año.
            </summary>
            <param name="response">La respuesta recibida del servidor que indica el resultado de la solicitud para retroceder de año.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestCreateDayAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Envía una solicitud asíncrona para crear un nuevo evento (día) en el servidor.
            </summary>
            <param name="sessionToken">El token de sesión del usuario para autenticar la solicitud.</param>
            <param name="fecha">La fecha del evento que se va a crear.</param>
            <param name="contenido">El contenido o descripción del evento.</param>
            <param name="tags">Etiquetas asociadas al evento.</param>
            <param name="esGrupal">Indica si el evento es grupal (true) o individual (false).</param>
            <param name="nombreGrupo">El nombre del grupo al que pertenece el evento (si es grupal).</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessCreateDayResponse(System.String)">
            <summary>
            Procesa la respuesta recibida del servidor tras solicitar la creación de un evento (día).
            </summary>
            <param name="response">La respuesta del servidor que contiene el estado de la solicitud.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestCreateGroupAsync(System.String,System.String,System.String)">
            <summary>
            Solicita la creación de un nuevo grupo en el servidor, enviando el paquete con los datos necesarios para la creación.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario del solicitante.</param>
            <param name="nombreGrupo">El nombre del grupo que se desea crear.</param>
            <returns>Una tarea asincrónica que representa la operación de la solicitud de creación de grupo.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessCreateGroupResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para la solicitud de creación de grupo.
            </summary>
            <param name="response">La respuesta del servidor que contiene el estado de la creación del grupo.</param>
            <exception cref="T:System.Exception">Lanza excepciones con mensajes específicos en caso de errores o respuestas inesperadas del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestDeleteGroupAsync(System.String,System.String,System.String)">
            <summary>
            Solicita la eliminación de un grupo al servidor.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario que solicita la eliminación del grupo.</param>
            <param name="nombreGrupo">El nombre del grupo que se desea eliminar.</param>
            <returns>Una tarea asincrónica que representa la solicitud de eliminación de grupo.</returns>
            <exception cref="T:System.Exception">Lanza excepciones si ocurre un error durante la solicitud o el procesamiento de la respuesta.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessDeleteGroupResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor al intentar eliminar un grupo.
            </summary>
            <param name="response">La respuesta recibida del servidor en formato de cadena.</param>
            <exception cref="T:System.Exception">Lanza excepciones específicas dependiendo de la respuesta del servidor.
            El error puede indicar problemas de permisos, inexistencia del grupo o respuestas desconocidas del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestDeleteGroupAgendaAsync(System.String,System.String,System.String)">
            <summary>
            Realiza una solicitud asincrónica al servidor para eliminar la agenda de un grupo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario para la autenticación.</param>
            <param name="username">El nombre de usuario que solicita la eliminación de la agenda grupal.</param>
            <param name="nombreGrupo">El nombre del grupo cuya agenda se desea eliminar.</param>
            <returns>Una tarea asincrónica que representa la operación de solicitud de eliminación de la agenda grupal.</returns>
            <exception cref="T:System.Exception">Lanza excepciones en caso de errores durante la solicitud, como errores de cifrado o respuestas inesperadas del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessDeleteGroupAgendaResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para la solicitud de eliminación de la agenda de un grupo.
            </summary>
            <param name="response">La respuesta del servidor que se va a procesar.</param>
            <exception cref="T:System.Exception">Lanza excepciones en caso de respuestas no esperadas o errores específicos del servidor, como falta de permisos o grupo inexistente.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestInviteUserToGroupAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Envía una solicitud para invitar a un usuario a un grupo.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario del solicitante que envía la invitación.</param>
            <param name="nombreGrupo">El nombre del grupo al que se desea invitar al usuario.</param>
            <param name="sobrenombreUsuario">El sobrenombre del usuario que se va a invitar al grupo.</param>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error en la solicitud o si la respuesta del servidor es inesperada.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessInviteUserResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor después de intentar invitar a un usuario a un grupo.
            </summary>
            <param name="response">La respuesta recibida del servidor, que contiene el resultado de la solicitud de invitación.</param>
            <exception cref="T:System.Exception">Lanza una excepción si la respuesta del servidor indica un error o si la respuesta es inesperada.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestViewOwnedGroupsAsync(System.String,System.String)">
            <summary>
            Solicita al servidor la lista de grupos que el usuario posee.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario del propietario de los grupos.</param>
            <returns>Una lista de nombres de los grupos que el usuario posee.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante la solicitud o el procesamiento de la respuesta del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessViewOwnedGroupsResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para extraer el nombre de un grupo al que el usuario posee acceso.
            </summary>
            <param name="response">La respuesta del servidor que contiene los detalles del grupo.</param>
            <returns>El nombre del grupo extraído de la respuesta del servidor.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si el formato de la respuesta no es el esperado o si hay errores en la validación de los datos.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestViewMembershipGroupsAsync(System.String,System.String)">
            <summary>
            Solicita al servidor los grupos de los cuales el usuario es miembro y devuelve una lista con los nombres de esos grupos.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que autentica la solicitud.</param>
            <param name="username">El nombre de usuario del solicitante.</param>
            <returns>Una lista de nombres de grupos a los que el usuario pertenece.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante el proceso de solicitud o si la respuesta del servidor es inesperada.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestViewAllGroupsAsync(System.String,System.String)">
            <summary>
            Solicita al servidor la lista de todos los grupos y devuelve una lista con los nombres de esos grupos.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que autentica la solicitud.</param>
            <param name="username">El nombre de usuario del solicitante.</param>
            <returns>Una lista de nombres de todos los grupos disponibles.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante el proceso de solicitud o si la respuesta del servidor es inesperada.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessViewGroupResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para extraer el nombre de un grupo según el formato del protocolo.
            </summary>
            <param name="response">La respuesta del servidor en formato de protocolo.</param>
            <returns>El nombre del grupo extraído de la respuesta.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error en el formato de la respuesta o si el token de sesión no coincide.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SendServerInfoUpdateRequestAsync(System.String,System.String,System.String)">
            <summary>
            Envía una solicitud al servidor para actualizar la información "Sobre" del usuario.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario asociado a la solicitud.</param>
            <param name="infoSobre">La nueva información "Sobre" que se desea actualizar.</param>
            <returns>Una tarea asincrónica que maneja el proceso de solicitud y respuesta del servidor.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante el proceso de cifrado, transmisión o respuesta del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.RequestShowMonthAsync(System.String,System.String)">
            <summary>
            Envía una solicitud al servidor para mostrar los datos del mes actual para el usuario especificado.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario asociado a la solicitud.</param>
            <returns>Una tarea asincrónica que realiza el proceso de solicitud y procesamiento de la respuesta del servidor.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante la construcción, cifrado, transmisión, o procesamiento de la respuesta del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.InsertarTagAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Envía una solicitud al servidor para insertar un nuevo tag en una fecha específica del usuario.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario asociado a la solicitud.</param>
            <param name="fecha">La fecha en la que se desea insertar el tag, en el formato esperado por el servidor.</param>
            <param name="nuevoTag">El contenido del tag que se desea insertar.</param>
            <returns>Una tarea asincrónica que realiza el proceso de inserción del tag.</returns>
            <exception cref="T:System.Exception">Lanza una excepción si ocurre un error durante el cifrado, envío, recepción o procesamiento de la respuesta del servidor.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessInsertTagResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor tras intentar insertar un tag en la agenda.
            </summary>
            <param name="response">La respuesta del servidor en formato de string.</param>
            <remarks>
            Este método maneja diferentes códigos de respuesta del servidor, mostrando mensajes apropiados al usuario 
            según el resultado de la operación. Incluye casos de éxito, errores específicos y errores desconocidos.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.Client.EliminarTagAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Solicita la eliminación de un tag en el servidor para una fecha específica.
            </summary>
            <param name="sessionToken">Token de sesión del usuario actual.</param>
            <param name="username">Nombre de usuario del cliente.</param>
            <param name="fecha">Fecha asociada al tag que se desea eliminar.</param>
            <param name="tagAEliminar">Nombre del tag que se eliminará.</param>
            <returns>Una tarea asincrónica que representa la operación de eliminación del tag.</returns>
            <remarks>
            Este método construye el paquete de eliminación de tag según el protocolo definido, lo cifra con AES, lo envía al servidor,
            y posteriormente procesa la respuesta del servidor para determinar el resultado de la operación.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessEliminarTagResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor tras intentar eliminar un tag.
            </summary>
            <param name="response">Respuesta del servidor tras la solicitud de eliminación del tag.</param>
            <remarks>
            El método interpreta los códigos de respuesta del servidor y muestra un mensaje correspondiente al usuario.
            Maneja confirmaciones exitosas, notificaciones de grupo y diversos errores relacionados con la operación.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.Client.SearchTagAsync(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Realiza una búsqueda de un tag en el servidor.
            </summary>
            <param name="sessionToken">Token de sesión del usuario.</param>
            <param name="username">Nombre de usuario que realiza la búsqueda.</param>
            <param name="grupal">Indica si la búsqueda es en un contexto grupal.</param>
            <param name="tag">Nombre del tag a buscar.</param>
            <param name="groupName">Nombre del grupo (opcional, requerido si es una búsqueda grupal).</param>
            <remarks>
            Este método cifra el paquete de búsqueda, lo envía al servidor y procesa la respuesta recibida.
            En caso de error, muestra un mensaje apropiado.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessSearchTagResponse(System.String)">
            <summary>
            Procesa la respuesta del servidor para la búsqueda de tags.
            </summary>
            <param name="response">Respuesta completa recibida del servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ModificarEventoAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Modifica un evento en el servidor.
            </summary>
            <param name="sessionToken">Token de sesión para la autenticación.</param>
            <param name="username">Nombre de usuario para identificar al solicitante.</param>
            <param name="fecha">Fecha del evento a modificar.</param>
            <param name="nuevoContenido">Nuevo contenido o descripción del evento.</param>
            <param name="esGrupal">Indica si el evento es grupal (true) o no (false).</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessModificarEventoResponse(System.String)">
            <summary>
            Procesa la respuesta recibida del servidor después de intentar modificar un evento.
            </summary>
            <param name="response">Respuesta del servidor tras la solicitud de modificación del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.BloquearDiaEdicionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Realiza el bloqueo de edición de un día específico en el servidor.
            </summary>
            <param name="sessionToken">Token de sesión del usuario.</param>
            <param name="username">Nombre de usuario que realiza la solicitud.</param>
            <param name="fecha">Fecha del día que se desea bloquear.</param>
            <param name="nombreGrupo">Nombre del grupo al que pertenece el usuario.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.ProcessBloquearDiaEdicionResponse(System.String)">
            <summary>
            Procesa la respuesta recibida del servidor después de intentar bloquear la edición de un día.
            </summary>
            <param name="response">Respuesta completa recibida del servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.service.Client.Disconnect">
            <summary>
            Cierra la conexión con el servidor, liberando los recursos asociados.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.service.DataExtractor.ExtractData(System.String,System.Int32@)">
            <summary>
            Extrae una porción de datos de la respuesta, comenzando en el índice proporcionado.
            </summary>
            <param name="response">La respuesta completa de la que se extraerán los datos.</param>
            <param name="index">Índice desde el cual se comenzará a extraer la porción de datos. Este valor se actualizará después de la extracción.</param>
            <returns>La porción de datos extraída de la respuesta.</returns>
            <remarks>
            El método asume que la respuesta sigue un formato en el cual los primeros dos caracteres representan el tamaño de la porción de datos a extraer. 
            Luego de extraer los datos, el índice proporcionado se actualiza para apuntar al siguiente segmento de la respuesta.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Lanzado si el índice está fuera del rango de la cadena de respuesta.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.DataExtractor.ExtractOtherData(System.String,System.Int32@)">
            <summary>
            Extrae una porción de datos de la respuesta, comenzando en el índice proporcionado, con un tamaño especificado por los primeros cuatro caracteres.
            </summary>
            <param name="response">La respuesta completa de la que se extraerán los datos.</param>
            <param name="index">Índice desde el cual se comenzará a extraer la porción de datos. Este valor se actualizará después de la extracción.</param>
            <returns>La porción de datos extraída de la respuesta.</returns>
            <remarks>
            El método asume que la respuesta sigue un formato en el cual los primeros cuatro caracteres representan el tamaño de la porción de datos a extraer. 
            Luego de extraer los datos, el índice proporcionado se actualiza para apuntar al siguiente segmento de la respuesta.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Lanzado si el índice está fuera del rango de la cadena de respuesta.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.DataExtractor.ExtractToken(System.String)">
            <summary>
            Extrae un token de la cadena de mensaje, utilizando los dos primeros caracteres para determinar el tamaño del token.
            </summary>
            <param name="message">El mensaje completo del que se extraerá el token.</param>
            <returns>El token extraído del mensaje.</returns>
            <remarks>
            El método supone que los primeros dos caracteres del mensaje indican el tamaño del token a extraer. 
            A continuación, extrae el token según el tamaño especificado y lo retorna.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Lanzado si el mensaje no tiene suficiente longitud para extraer el token con el tamaño indicado.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructLoginPacket(System.String,System.String)">
            <summary>
            Genera un paquete para la solicitud de login.
            </summary>
            <param name="username">Nombre de usuario.</param>
            <param name="password">Contraseña.</param>
            <returns>El paquete de login en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructUserDataRequestPacket(System.String,System.String,System.String)">
            <summary>
            Genera un paquete para solicitar la modificación de los datos de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="connectedUsername">Nombre de usuario conectado.</param>
            <param name="usernameToChange">Nombre de usuario cuyo dato se quiere cambiar.</param>
            <returns>El paquete para modificar los datos de usuario en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructLogoutPacket(System.String,System.String)">
            <summary>
            Genera un paquete para el logout de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <returns>El paquete de logout en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructShutdownPacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete de desconexión según el protocolo especificado, incluyendo el token de sesión, el nombre de usuario y la contraseña.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario del cliente.</param>
            <param name="password">La contraseña del usuario.</param>
            <returns>Una cadena que representa el paquete de desconexión listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete se construye con una estructura específica, donde cada parámetro tiene una longitud especificada en dos dígitos 
            y el paquete sigue un formato predefinido para asegurar la correcta comunicación con el servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructInfoSobrePacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete que contiene información sobre el usuario, siguiendo un formato de protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario.</param>
            <param name="username">El nombre de usuario del cliente.</param>
            <param name="infoSobre">La información adicional sobre el usuario o el contexto.</param>
            <returns>Una cadena que representa el paquete con la información sobre el usuario y su sesión, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete se construye concatenando los valores de los parámetros, precedidos por sus longitudes en dos dígitos. 
            Este formato es parte de un protocolo predefinido para asegurar que el servidor pueda interpretar correctamente 
            los datos recibidos. La longitud de cada parámetro es codificada antes del propio dato.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructShowUsersPacket(System.String,System.String)">
            <summary>
            Construye un paquete para mostrar la lista de usuarios, siguiendo un formato de protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario del cliente que realiza la solicitud.</param>
            <returns>Una cadena que representa el paquete con la información necesaria para mostrar los usuarios, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete se construye concatenando los valores de los parámetros, precedidos por sus longitudes en dos dígitos.
            El paquete incluye un identificador de acción y el token de sesión con el nombre de usuario del cliente.
            Este formato asegura que el servidor pueda interpretar correctamente los datos recibidos.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructChangeFullNamePacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para cambiar el nombre completo de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="usernameToChange">Nombre de usuario cuyo nombre completo se va a cambiar.</param>
            <param name="newFullName">Nuevo nombre completo.</param>
            <param name="connectedUsername">Nombre de usuario conectado (que puede ser el administrador).</param>
            <returns>El paquete para cambiar el nombre completo en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructChangeBirthDatePacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para cambiar la fecha de nacimiento de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="usernameToChange">Nombre de usuario cuyo fecha de nacimiento se va a cambiar.</param>
            <param name="newBirthDate">Nueva fecha de nacimiento.</param>
            <param name="connectedUsername">Nombre de usuario conectado.</param>
            <returns>El paquete para cambiar la fecha de nacimiento en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructChangePasswordPacket(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para cambiar la contraseña de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="usernameToEdit">Nombre de usuario cuyo contraseña se va a cambiar.</param>
            <param name="currentPassword">Contraseña actual.</param>
            <param name="newPassword">Nueva contraseña.</param>
            <param name="connectedUsername">Nombre de usuario conectado (quien está realizando el cambio).</param>
            <returns>El paquete para cambiar la contraseña en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructChangeOtherDataPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para cambiar otros datos de un usuario (como dirección, teléfono, etc.).
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="usernameToChange">Nombre de usuario cuyo otros datos se van a cambiar.</param>
            <param name="connectedUsername">Nombre de usuario conectado.</param>
            <param name="newOtherData">Nuevo dato (por ejemplo, teléfono o dirección).</param>
            <returns>El paquete para cambiar otros datos en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructDeleteUserPacket(System.String,System.String,System.String)">
            <summary>
            Genera un paquete para eliminar un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="usernameToDelete">Nombre de usuario a eliminar.</param>
            <param name="connectedUsername">Nombre de usuario conectado.</param>
            <returns>El paquete para eliminar el usuario en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructCreateUserPacket(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construye un paquete para crear un nuevo usuario con los datos proporcionados.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="connectedUsername">El nombre de usuario del usuario conectado.</param>
            <param name="newUsername">El nombre de usuario para el nuevo usuario.</param>
            <param name="password">La contraseña del nuevo usuario.</param>
            <param name="fullName">El nombre completo del nuevo usuario.</param>
            <param name="birthDate">La fecha de nacimiento del nuevo usuario.</param>
            <param name="otrosDatos">Otros datos adicionales del nuevo usuario.</param>
            <param name="rolPermisos">El rol y permisos del nuevo usuario.</param>
            <param name="apodo">El apodo del nuevo usuario.</param>
            <returns>El paquete en formato string listo para ser enviado.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructAddPermissionPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Construye un paquete para añadir permisos a un rol para un usuario específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="connectedUsername">El nombre de usuario del usuario conectado.</param>
            <param name="roleName">El nombre del rol al que se añadirán los permisos.</param>
            <param name="permissions">Los permisos que se asignarán al rol, en formato de valores separados por comas.</param>
            <returns>El paquete en formato string listo para ser enviado.</returns>
            <exception cref="T:System.ArgumentException">Lanzada si los permisos no son exactamente 7 valores separados por comas.</exception>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructDeleteRolePacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete para eliminar un rol de un usuario, siguiendo el formato del protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que está realizando la solicitud.</param>
            <param name="connectedUsername">El nombre de usuario del cliente que está conectado y realizando la solicitud.</param>
            <param name="roleToDelete">El nombre del rol que se va a eliminar.</param>
            <returns>Una cadena que representa el paquete con los parámetros necesarios para la eliminación del rol, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete incluye los parámetros: el token de sesión, el nombre de usuario conectado y el rol que se va a eliminar,
            con sus respectivas longitudes representadas como cadenas de dos dígitos, seguido de los valores de los parámetros.
            Este formato asegura que el servidor pueda interpretar correctamente los datos recibidos.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructGetPermissionsPacket(System.String,System.String)">
            <summary>
            Construye un paquete para obtener los permisos de un usuario específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario conectado.</param>
            <param name="connectedUsername">El nombre de usuario del usuario conectado.</param>
            <returns>El paquete en formato string listo para ser enviado.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructEditPermissionsPacket(System.String,System.String,System.String,System.Boolean[])">
            <summary>
            Construye un paquete para editar los permisos de un usuario.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario al que se le editarán los permisos.</param>
            <param name="rol">Rol asignado al usuario.</param>
            <param name="permisos">Arreglo de permisos que se asignarán al usuario (7 elementos booleanos).</param>
            <returns>Cadena que representa el paquete de datos para editar los permisos de un usuario.</returns>
            <exception cref="T:System.ArgumentException">Lanzado si los permisos no tienen exactamente 7 valores (0 o 1).</exception>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructModoGestionPacket(System.String,System.String)">
            <summary>
            Construye un paquete para activar o desactivar el Modo Gestión.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario del usuario conectado.</param>
            <param name="activarModoGestion">Indica si el Modo Gestión debe ser activado (true) o desactivado (false).</param>
            <returns>Cadena que representa el paquete de datos para activar o desactivar el Modo Gestión.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructCreateDayPacket(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construye un paquete para crear un nuevo evento en el sistema, incluyendo la fecha, contenido, tags y detalles sobre si es grupal.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="fecha">Fecha del evento en formato de cadena (por ejemplo, "2024-11-20").</param>
            <param name="contenido">Descripción o contenido del evento.</param>
            <param name="tags">Etiquetas asociadas al evento. Puede ser una cadena vacía si no hay etiquetas.</param>
            <param name="esGrupal">Indica si el evento es grupal (true) o individual (false).</param>
            <param name="nombreGrupo">Nombre del grupo asociado al evento, si es un evento grupal.</param>
            <returns>Cadena que representa el paquete de datos para crear un evento.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructCreateGroupPacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete para crear un nuevo grupo, siguiendo el formato del protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que está realizando la solicitud.</param>
            <param name="username">El nombre de usuario del cliente que está conectado y realizando la solicitud.</param>
            <param name="nombreGrupo">El nombre del nuevo grupo que se va a crear.</param>
            <returns>Una cadena que representa el paquete con los parámetros necesarios para la creación del grupo, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete incluye los parámetros: el token de sesión, el nombre de usuario conectado y el nombre del grupo a crear,
            con sus respectivas longitudes representadas como cadenas de dos dígitos, seguido de los valores de los parámetros.
            Este formato asegura que el servidor pueda interpretar correctamente los datos recibidos y proceder con la creación del grupo.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructDeleteGroupPacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete para eliminar un grupo, siguiendo el formato del protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que está realizando la solicitud.</param>
            <param name="username">El nombre de usuario del cliente que está conectado y realizando la solicitud.</param>
            <param name="nombreGrupo">El nombre del grupo que se desea eliminar.</param>
            <returns>Una cadena que representa el paquete con los parámetros necesarios para la eliminación del grupo, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete incluye los parámetros: el token de sesión, el nombre de usuario conectado y el nombre del grupo a eliminar,
            con sus respectivas longitudes representadas como cadenas de dos dígitos, seguido de los valores de los parámetros.
            Este formato asegura que el servidor pueda interpretar correctamente los datos recibidos y proceder con la eliminación del grupo.
            Además, el paquete generado se muestra en un MessageBox para fines de depuración antes de enviarlo al servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructDeleteGroupAgendaPacket(System.String,System.String,System.String)">
            <summary>
            Construye un paquete para eliminar la agenda asociada a un grupo, siguiendo el formato del protocolo específico.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que está realizando la solicitud.</param>
            <param name="username">El nombre de usuario del cliente que está conectado y realizando la solicitud.</param>
            <param name="nombreGrupo">El nombre del grupo cuya agenda se desea eliminar.</param>
            <returns>Una cadena que representa el paquete con los parámetros necesarios para la eliminación de la agenda del grupo, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete incluye los parámetros: el token de sesión, el nombre de usuario conectado y el nombre del grupo cuya agenda
            se desea eliminar, con sus respectivas longitudes representadas como cadenas de dos dígitos, seguido de los valores de los parámetros.
            Este formato asegura que el servidor pueda interpretar correctamente los datos recibidos y proceder con la eliminación de la agenda del grupo.
            Además, el paquete generado se muestra en un MessageBox para fines de depuración antes de enviarlo al servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructInviteUserPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Construye un paquete para invitar a un usuario a un grupo específico, siguiendo el formato del protocolo definido.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que está realizando la invitación.</param>
            <param name="username">El nombre de usuario del cliente que está enviando la invitación.</param>
            <param name="nombreGrupo">El nombre del grupo al cual se desea invitar al usuario.</param>
            <param name="sobrenombreUsuario">El sobrenombre del usuario que se va a invitar.</param>
            <returns>Una cadena que representa el paquete con los parámetros necesarios para la invitación, listo para ser enviado al servidor.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros: el token de sesión, el nombre de usuario del que envía la invitación,
            el nombre del grupo al que se le invita y el sobrenombre del usuario invitado. Estos parámetros son precedidos por su longitud 
            representada en dos dígitos para asegurar que el servidor pueda leer y procesar correctamente los datos.
            También, el paquete generado se muestra en un MessageBox para fines de depuración antes de enviarlo al servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructAgendaPacket(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construye un paquete para crear o mostrar una agenda, incluyendo información sobre si es una agenda grupal o personal.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que solicita la creación o visualización de la agenda.</param>
            <param name="username">El nombre de usuario del cliente que está interactuando con la agenda.</param>
            <param name="isGrupal">Indica si la agenda es grupal o no. True si es grupal, False si es personal.</param>
            <param name="groupName">El nombre del grupo asociado a la agenda, opcional, solo se usa si la agenda es grupal.</param>
            <returns>Una cadena que representa el paquete listo para ser enviado al servidor para la creación o consulta de la agenda.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros:
            - Token de sesión, con su longitud antes del valor (en formato de 2 dígitos).
            - Nombre de usuario, con su longitud también precedida por 2 dígitos.
            - Un conjunto de 2 bytes vacíos, representado por "00".
            - Un byte que indica si la agenda es grupal (1) o personal (0).
            - Si la agenda es grupal, se incluye el nombre del grupo con su longitud también representada por 2 dígitos.
            Este paquete está diseñado para seguir el protocolo de comunicación específico entre el cliente y el servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructViewOwnedGroupsPacket(System.String,System.String)">
            <summary>
            Construye un paquete para solicitar los grupos que el usuario posee (grupos de los cuales es administrador o creador).
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario que solicita los grupos que posee.</param>
            <returns>Una cadena que representa el paquete listo para ser enviado al servidor con la solicitud de grupos propios.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros:
            - Token de sesión, con su longitud antes del valor (en formato de 2 dígitos).
            - Nombre de usuario, con su longitud también precedida por 2 dígitos.
            La acción para esta solicitud está identificada por el código "18" en el protocolo.
            Este paquete sigue el formato específico requerido para solicitar los grupos que un usuario posee.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructViewMembershipGroupsPacket(System.String,System.String)">
            <summary>
            Construye un paquete para solicitar los grupos en los que el usuario es miembro.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario que solicita los grupos donde es miembro.</param>
            <returns>Una cadena que representa el paquete listo para ser enviado al servidor con la solicitud de grupos de membresía.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros:
            - Token de sesión, con su longitud antes del valor (en formato de 2 dígitos).
            - Nombre de usuario, con su longitud también precedida por 2 dígitos.
            La acción para esta solicitud está identificada por el código "19" en el protocolo.
            Este paquete sigue el formato específico requerido para solicitar los grupos donde el usuario es miembro.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructViewAllGroupsPacket(System.String,System.String)">
            <summary>
            Construye un paquete para solicitar ver todos los grupos disponibles.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario que solicita la información sobre todos los grupos.</param>
            <returns>Una cadena que representa el paquete listo para ser enviado al servidor con la solicitud de todos los grupos.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros:
            - Token de sesión, con su longitud antes del valor (en formato de 2 dígitos).
            - Nombre de usuario, con su longitud también precedida por 2 dígitos.
            La acción para esta solicitud está identificada por el código "20" en el protocolo.
            Este paquete sigue el formato específico requerido para solicitar la lista completa de grupos.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructShowMonthPacket(System.String,System.String)">
            <summary>
            Construye un paquete para solicitar la vista del mes en el sistema.
            </summary>
            <param name="sessionToken">El token de sesión del usuario que realiza la solicitud.</param>
            <param name="username">El nombre de usuario que solicita la vista del mes.</param>
            <returns>Una cadena que representa el paquete listo para ser enviado al servidor para solicitar la vista del mes.</returns>
            <remarks>
            El paquete incluye los siguientes parámetros:
            - Token de sesión con su longitud precedida por 2 dígitos.
            - Nombre de usuario con su longitud precedida por 2 dígitos.
            - Un conjunto de 2 bytes vacíos ("00") para completar el paquete.
            - Información adicional estática como "109IOCtest11" al final del paquete.
            Este paquete sigue el formato específico requerido para mostrar la vista de un mes.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructAdvanceMonthPacket(System.String,System.String)">
            <summary>
            Genera un paquete para avanzar un mes en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <returns>El paquete para avanzar un mes en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructGoBackMonthPacket(System.String,System.String)">
            <summary>
            Genera un paquete para retroceder un mes en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <returns>El paquete para retroceder un mes en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructAdvanceYearPacket(System.String,System.String)">
            <summary>
            Genera un paquete para avanzar un año en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <returns>El paquete para avanzar un año en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructGoBackYearPacket(System.String,System.String)">
            <summary>
            Genera un paquete para retroceder un año en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <returns>El paquete para retroceder un año en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructInsertTagPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para insertar un tag en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <param name="fecha">Fecha en formato DD/MM/YYYY.</param>
            <param name="nuevoTag">Nuevo tag a insertar.</param>
            <returns>El paquete para insertar el tag en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructEliminarTagPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para eliminar un tag en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <param name="fecha">Fecha en formato DD/MM/YYYY.</param>
            <param name="tagAEliminar">Tag a eliminar.</param>
            <returns>El paquete para eliminar el tag en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructSearchTagPacket(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Genera un paquete para buscar días por tag.
            </summary>
            <param name="sessionToken">Token de sesión del usuario.</param>
            <param name="username">Nombre de usuario.</param>
            <param name="grupal">Indica si la búsqueda es grupal.</param>
            <param name="tag">Tag a buscar.</param>
            <param name="groupName">Nombre del grupo (si aplica).</param>
            <returns>El paquete de búsqueda de tag en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructModificarEventoPacket(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Genera un paquete para editar el contenido de un evento en la agenda.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <param name="fecha">Fecha del evento a editar (formato DD/MM/YYYY).</param>
            <param name="nuevoContenido">Nuevo contenido para el evento.</param>
            <param name="esGrupal">Indica si es un evento grupal.</param>
            <returns>El paquete para editar el evento en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.ConstructBloquearDiaEdicionPacket(System.String,System.String,System.String,System.String)">
            <summary>
            Genera un paquete para bloquear un día para edición en una agenda grupal.
            </summary>
            <param name="sessionToken">Token de sesión del usuario conectado.</param>
            <param name="username">Nombre de usuario conectado.</param>
            <param name="fecha">Fecha del día a bloquear (formato DD/MM/YYYY).</param>
            <param name="nombreGrupo">Nombre del grupo.</param>
            <returns>El paquete para bloquear el día en formato string.</returns>
        </member>
        <member name="M:AgendaEscritorio.service.ProtocolHelper.LecturaPartesPaquete(System.String)">
            <summary>
            Extrae la acción y el mensaje de una respuesta de paquete.
            </summary>
            <param name="response">La respuesta del paquete que contiene la acción y el mensaje.</param>
            <returns>Un tuple que contiene un entero (acción) y una cadena (mensaje).</returns>
            <exception cref="T:System.FormatException">Se lanza si la acción no tiene el formato esperado.</exception>
        </member>
        <member name="T:AgendaEscritorio.view.AjustesView">
            <summary>
            Lógica de interacción para AjustesView.xaml
            </summary>
            <summary>
            AjustesView
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.AjustesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AgendaEscritorio.view.CalendarView">
            <summary>
            CalendarView
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.#ctor(AgendaEscritorio.service.Client)">
            <summary>
            Inicializa la ventana del calendario.
            </summary>
            <param name="client">Instancia del cliente que se usará para interactuar con el servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.UpdateCalendarWithModifiedEvents(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Actualiza el calendario con los eventos modificados agrupándolos por fecha.
            </summary>
            <param name="modifiedEventList">Lista de eventos modificados, donde cada evento es un diccionario con información sobre el evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.PopulateCalendar">
            <summary>
            Rellena la vista del calendario con los días del mes actual.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.DayButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en un botón de día del calendario, mostrando los detalles de los eventos asociados a ese día.
            </summary>
            <param name="sender">El botón que fue clicado.</param>
            <param name="e">Datos del evento del clic.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.PreviousMonth_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cambia al mes anterior, actualiza el calendario y solicita al servidor retroceder un mes.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de mes anterior).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.NextMonth_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cambia al siguiente mes, actualiza el calendario y solicita al servidor avanzar un mes.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de siguiente mes).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.PreviousYear_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cambia al año anterior, actualiza el calendario y solicita al servidor retroceder un año.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de año anterior).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.NextYear_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cambia al siguiente año, actualiza el calendario y solicita al servidor avanzar un año.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de siguiente año).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.CloseButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana de la aplicación.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de cerrar).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.MinimizeButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Minimiza la ventana de la aplicación.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de minimizar).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.MaximizeRestoreButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maximiza o restaura la ventana dependiendo del estado actual.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de maximizar/restaurar).</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.BackButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Vuelve al menú principal al hacer clic en el botón "Atrás".
            Cierra la ventana actual y abre la vista del menú principal.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón de "Atrás").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.MostrarUnicoPanel(System.Windows.UIElement)">
            <summary>
            Gestiona la visibilidad de los paneles en función de la acción seleccionada.
            </summary>
            <param name="mostrarPanel">El panel que debe mostrarse. Los demás se ocultarán.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.CrearEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Muestra los campos necesarios para crear un evento al hacer clic en el botón "Crear Evento".
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón "Crear Evento").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Envía los datos del evento cuando se hace clic en el botón "Enviar Evento".
            Recoge los datos de los campos de la interfaz, valida la información, y hace la solicitud al servidor.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón "Enviar Evento").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.CrearGrupo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para crear un grupo.
            Muestra el panel de creación de grupo y configura la visibilidad de los controles necesarios.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de crear grupo).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Muestra el panel de creación de grupo (`crearGrupoPanel`).
            2. Configura la visibilidad de los controles relacionados con la creación de grupo, como:
               - La etiqueta del nombre del grupo (`textNombreGrupoLabelCrear`).
               - El campo de texto para ingresar el nombre del grupo (`txtNombreGrupoCrear`).
               - El botón para enviar la solicitud de creación de grupo (`btnEnviarGrupo`).
            El propósito es permitir al usuario ingresar los datos necesarios para crear un nuevo grupo.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarGrupo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Enviar Grupo", que envía la solicitud para crear un nuevo grupo.
            Recoge los datos de la interfaz de usuario, valida la entrada, y envía la solicitud al servidor.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de enviar grupo).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Recoge el nombre del grupo desde el campo de texto `txtNombreGrupoCrear`.
            2. Realiza una validación básica para asegurarse de que el nombre del grupo no esté vacío.
            3. Si la validación falla, muestra un mensaje indicando que se debe ingresar un nombre.
            4. Si la validación es exitosa, se envía la solicitud de creación de grupo al servidor utilizando `RequestCreateGroupAsync`.
            5. Si la solicitud es exitosa, muestra un mensaje de éxito y oculta los controles de creación de grupo.
            6. Si ocurre una excepción durante el proceso, muestra un mensaje de error y también oculta los controles de creación de grupo.
            7. (Opcional) Limpia el campo de texto después de un intento exitoso de creación.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EliminarGrupo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Eliminar Grupo", mostrando el panel de eliminación de grupo.
            Configura la visibilidad de los controles necesarios para permitir al usuario introducir el nombre del grupo que desea eliminar.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de eliminar grupo).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Muestra el panel de eliminación de grupo (`eliminarGrupoPanel`), permitiendo al usuario introducir los datos necesarios.
            2. Configura la visibilidad de los controles relacionados con la eliminación del grupo, como la etiqueta de nombre de grupo (`textNombreGrupoLabelEliminar`),
               el campo de texto para el nombre del grupo (`txtNombreGrupoEliminar`), y el botón para enviar la solicitud de eliminación (`btnEnviarEliminarGrupo`).
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarEliminarGrupo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Enviar Eliminar Grupo", enviando una solicitud para eliminar el grupo especificado.
            Valida los datos ingresados y maneja posibles excepciones durante la eliminación.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de enviar eliminación de grupo).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Recoge el nombre del grupo a eliminar desde el campo de texto (`txtNombreGrupoEliminar`).
            2. Valida que el campo de texto no esté vacío y muestra un mensaje si es necesario.
            3. Llama al método `RequestDeleteGroupAsync` para enviar la solicitud de eliminación del grupo.
            4. Si la eliminación es exitosa, muestra un mensaje de éxito.
            5. Si ocurre una excepción durante el proceso, muestra un mensaje de error.
            6. Se asegura de que, después de la operación, el estado de la interfaz de usuario se actualice adecuadamente.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.VerGruposPropietario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Ver Grupos Propios". Envía una solicitud para obtener los grupos propios del usuario 
            y muestra los resultados en la interfaz de usuario. Si no se encuentran grupos o si ocurre un error, muestra un mensaje adecuado.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Ver Grupos Propios").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Llama al método `RequestViewOwnedGroupsAsync` del cliente para obtener los grupos propios del usuario.
            2. Verifica si se encontraron grupos y los muestra en un cuadro de mensaje.
            3. Si no se encuentran grupos, muestra un mensaje indicando que no hay grupos propios.
            4. Si ocurre una excepción (por ejemplo, problemas de red o servidor), muestra un mensaje de error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.VerGruposMembresia_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Ver Grupos de Membresía". Envía una solicitud para obtener los grupos donde el usuario es miembro 
            y muestra los resultados en la interfaz de usuario. Si no se encuentran grupos o si ocurre un error, muestra un mensaje adecuado.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Ver Grupos de Membresía").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Llama al método `RequestViewMembershipGroupsAsync` del cliente para obtener los grupos donde el usuario es miembro.
            2. Verifica si se encontraron grupos y los muestra en un cuadro de mensaje.
            3. Si no se encuentran grupos, muestra un mensaje indicando que el usuario no es miembro de ningún grupo.
            4. Si ocurre una excepción (por ejemplo, problemas de red o servidor), muestra un mensaje de error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.VerTodosGrupos_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Ver Todos los Grupos". Envía una solicitud para obtener todos los grupos disponibles 
            y muestra los resultados en la interfaz de usuario. Si no se encuentran grupos o si ocurre un error, muestra un mensaje adecuado.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Ver Todos los Grupos").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Llama al método `RequestViewAllGroupsAsync` del cliente para obtener todos los grupos disponibles en el servidor.
            2. Verifica si se encontraron grupos y los muestra en un cuadro de mensaje.
            3. Si no se encuentran grupos, muestra un mensaje indicando que no hay grupos disponibles en el servidor.
            4. Si ocurre una excepción (por ejemplo, problemas de red o servidor), muestra un mensaje de error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.VerEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Muestra los detalles del evento cuando se hace clic en el botón "Ver Evento".
            Este método debe implementar la lógica para mostrar los detalles del evento.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón "Ver Evento").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.ModificarEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Permite modificar un evento cuando se hace clic en el botón "Modificar Evento".
            Este método debe implementar la lógica para editar un evento existente.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón "Modificar Evento").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarModificarEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Enviar Modificar Evento". Valida los campos de la interfaz de usuario, 
            luego llama al método para modificar un evento en el servidor con los datos proporcionados por el usuario.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Enviar Modificar Evento").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Recoge los datos ingresados en la interfaz de usuario: la fecha del evento, el nuevo contenido y si es un evento grupal o no.
            2. Valida si los campos esenciales (fecha y contenido) están completos, mostrando un mensaje de advertencia si alguno está vacío.
            3. Llama al método `ModificarEventoAsync` del cliente para enviar los datos al servidor y modificar el evento.
            4. Si ocurre un error durante la solicitud, muestra un mensaje con la descripción del error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EliminarEvento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Elimina un evento cuando se hace clic en el botón "Eliminar Evento".
            Este método debe implementar la lógica para eliminar un evento existente.
            </summary>
            <param name="sender">El objeto que disparó el evento (el botón "Eliminar Evento").</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EliminarAgendaGrupal_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Eliminar Agenda Grupal". Muestra el panel de eliminación de la agenda grupal 
            y configura la visibilidad de los controles necesarios para completar la acción de eliminación.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Eliminar Agenda Grupal").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Llama al método `MostrarUnicoPanel` para mostrar el panel de eliminación de la agenda grupal.
            2. Configura la visibilidad de los controles necesarios para que el usuario ingrese el nombre del grupo a eliminar.
            3. Asegura que los controles, como los campos de texto y botones, sean visibles para el usuario.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarEliminarAgendaGrupal_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Eliminar Agenda Grupal". Recoge el nombre del grupo desde la interfaz de usuario,
            valida el campo y luego envía una solicitud al cliente para eliminar la agenda grupal.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Enviar Eliminar Agenda Grupal").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Recoge el nombre del grupo desde el campo de texto `txtNombreGrupoEliminarAgenda`.
            2. Valida si el campo no está vacío. Si está vacío, muestra un mensaje pidiendo al usuario que introduzca un nombre.
            3. Si el campo está correctamente llenado, llama a la función `RequestDeleteGroupAgendaAsync` del cliente para enviar la solicitud de eliminación.
            4. Si la eliminación es exitosa, muestra un mensaje de éxito.
            5. Si ocurre algún error, muestra un mensaje de error detallado.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.InvitarUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Invitar Usuario". Muestra el panel de invitación de usuario y configura la visibilidad
            de los controles necesarios para la interacción con el usuario.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Invitar Usuario").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Muestra el panel de invitación de usuario (`invitarUsuarioPanel`) usando el método `MostrarUnicoPanel`.
            2. Configura la visibilidad de los controles necesarios para la interacción:
               - Etiquetas y campos para el nombre del grupo (`textNombreGrupoLabelInvitar` y `txtNombreGrupoInvitar`).
               - Etiqueta y campo para el sobrenombre del usuario a invitar (`textSobrenombreLabelInvitar` y `txtSobrenombreInvitar`).
               - El botón de envío de la invitación (`btnEnviarInvitarUsuario`).
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarInvitarUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Enviar Invitación". Recoge los datos de la interfaz de usuario, valida los campos 
            y envía una solicitud para invitar a un usuario a un grupo.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Enviar Invitación").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Recoge los datos ingresados por el usuario:
               - El nombre del grupo (`nombreGrupo`) desde el campo de texto `txtNombreGrupoInvitar`.
               - El sobrenombre del usuario a invitar (`sobrenombreUsuario`) desde el campo de texto `txtSobrenombreInvitar`.
            2. Valida que ambos campos no estén vacíos. Si alguno de los campos está vacío, muestra un mensaje solicitando que se 
               rellenen todos los campos y termina la ejecución.
            3. Si los campos son válidos, llama al método `RequestInviteUserToGroupAsync` del cliente para enviar la solicitud de invitación.
            4. Si la solicitud se envía con éxito, muestra un mensaje indicando que el usuario fue invitado exitosamente.
            5. Si ocurre una excepción durante el proceso, muestra un mensaje de error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.MostrarMes_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Mostrar Mes". Recoge los datos de la interfaz de usuario, 
            determina si la solicitud es para una agenda grupal o no, y luego hace la solicitud correspondiente.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Mostrar Mes").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Obtiene el estado del CheckBox `chkEsGrupal` para determinar si la solicitud es para una agenda grupal o no.
               - Si el CheckBox está marcado, se considera una solicitud grupal.
            2. Si la solicitud es grupal, recoge el nombre del grupo desde el campo de texto `txtNombreGrupoOpcional`.
               - Si no es grupal, el nombre del grupo se deja vacío.
            3. Llama al método `RequestShowAgendaAsync` del cliente, pasando el token de sesión, el nombre de usuario, 
               si la solicitud es grupal y el nombre del grupo (si es necesario).
            4. Si ocurre un error durante el proceso, muestra un mensaje de error con los detalles.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.ChkEsGrupal_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el CheckBox "Es Grupal". Habilita o deshabilita el campo de texto 
            "Nombre del Grupo" en función de si el CheckBox está marcado o no.
            </summary>
            <param name="sender">El objeto que genera el evento (el CheckBox "Es Grupal").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método realiza las siguientes acciones:
            1. Comprueba si el CheckBox `chkEsGrupal` está marcado o no. 
               - Si el CheckBox está marcado (es decir, la solicitud es grupal), habilita el campo de texto `txtNombreGrupoOpcional` para que el usuario pueda ingresar el nombre del grupo.
               - Si el CheckBox no está marcado (es decir, la solicitud no es grupal), deshabilita el campo de texto `txtNombreGrupoOpcional` para evitar que el usuario ingrese un nombre de grupo.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.InsertarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón "Insertar Tag". Muestra el panel para permitir al usuario insertar
            un tag y asociarlo a una fecha.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón "Insertar Tag").</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método hace visible el panel `insertarTagPanel`, que contiene los controles necesarios para que
            el usuario ingrese un tag y lo asocie a una fecha específica. El panel estará visible para el usuario
            después de hacer clic en el botón correspondiente.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarInsertarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para insertar un tag. Valida los campos proporcionados por el usuario
            y, si son válidos, envía los datos al servidor para asociar el tag con una fecha específica.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de insertar tag).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método se activa cuando el usuario hace clic en el botón "Enviar" para insertar un nuevo tag. 
            Valida que los campos de fecha y el nuevo tag no estén vacíos. Si los datos son válidos, se llama 
            al método `InsertarTagAsync` del cliente para asociar el tag con la fecha en el servidor. En caso de 
            error, se muestra un mensaje con la descripción del problema.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EliminarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para mostrar el panel de eliminación de un tag.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de eliminar tag).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método se activa cuando el usuario hace clic en el botón "Eliminar Tag". 
            Su propósito es hacer visible el panel donde el usuario podrá especificar la fecha 
            y el tag a eliminar. De este modo, el usuario podrá interactuar con los controles 
            necesarios para realizar la eliminación del tag.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarEliminarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para eliminar un tag asociado a una fecha específica.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de eliminar tag).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método se activa cuando el usuario hace clic en el botón "Enviar" para eliminar un tag.
            Recoge los datos de la interfaz de usuario (fecha y tag), valida que ambos campos estén completos,
            y luego llama al servicio para eliminar el tag en el servidor. Si ocurre un error, muestra un mensaje
            de error en la interfaz de usuario.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.BuscarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para buscar un tag.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de buscar tag).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método se activa cuando el usuario hace clic en el botón "Buscar Tag".
            Muestra el panel para realizar la búsqueda de un tag. Además, maneja la visibilidad del panel 
            relacionado con los grupos, dependiendo de si el checkbox "Es grupal" está marcado o no.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.EnviarBuscarTag_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para realizar la búsqueda de un tag.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de buscar tag).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método se activa cuando el usuario hace clic en el botón "Buscar Tag".
            Valida que los campos necesarios estén completos y luego realiza una solicitud de búsqueda de un tag.
            Si la búsqueda es grupal, también valida que el nombre del grupo esté ingresado.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.CalendarView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AgendaEscritorio.view.loginView">
            <summary>
            Vista de la ventana de login donde los usuarios ingresan sus credenciales para acceder al sistema.
            Incluye validación de entrada, conexión con el servidor y manejo de la interfaz.
            </summary>
            <summary>
            loginView
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.#ctor">
            <summary>
            Constructor de la clase <see cref="T:AgendaEscritorio.view.loginView"/>. Inicializa los componentes de la interfaz y
            establece la conexión con el servidor de manera asincrónica.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.ConnectToServerAsync">
            <summary>
            Método asincrónico que establece la conexión con el servidor.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.Window_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Permite mover la ventana al arrastrarla desde cualquier parte. Este evento se dispara cuando
            el usuario hace clic y mantiene presionado el botón izquierdo del ratón.
            </summary>
            <param name="sender">El objeto que disparó el evento (ventana de la aplicación).</param>
            <param name="e">Argumentos del evento que contienen información del ratón.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.MinimizeButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Minimiza la ventana cuando se hace clic en el botón correspondiente.
            </summary>
            <param name="sender">El objeto que disparó el evento (botón de minimizar).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.CloseButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana de login cuando el usuario hace clic en el botón de cerrar.
            </summary>
            <param name="sender">El objeto que disparó el evento (botón de cerrar).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.RemoveText(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Elimina el texto por defecto del cuadro de texto de nombre de usuario cuando el usuario hace clic
            en el campo de texto para empezar a escribir.
            </summary>
            <param name="sender">El objeto que disparó el evento (campo de texto para nombre de usuario).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.AddText(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Restaura el texto por defecto en el cuadro de texto de nombre de usuario si el campo está vacío
            y el usuario no ha ingresado ningún valor.
            </summary>
            <param name="sender">El objeto que disparó el evento (campo de texto para nombre de usuario).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.LoginButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de login cuando el usuario hace clic en el botón "Iniciar sesión".
            Valida las credenciales ingresadas y envía la solicitud al servidor para autenticar al usuario.
            Si el login es exitoso, abre la ventana principal; de lo contrario, muestra un mensaje de error.
            </summary>
            <param name="sender">El objeto que disparó el evento (botón de login).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.loginView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AgendaEscritorio.view.MainMenuView">
            <summary>
            Ventana principal que muestra el menú según el rol del usuario.
            Permite acceder a distintas secciones como la gestión de perfiles, agenda, ajustes, y cerrar sesión.
            </summary>
            <summary>
            MainMenuView
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.#ctor(AgendaEscritorio.service.Client)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AgendaEscritorio.view.MainMenuView"/>.
            </summary>
            <param name="client">Instancia del cliente que se usará para las comunicaciones con el servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnGestionPerfiles_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de gestión de perfiles.
            Abre la ventana de gestión de usuarios.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnAgenda_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de agenda.
            Abre la ventana del calendario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnPeticionManual_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para mostrar u ocultar el panel de petición manual.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de petición manual).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método cambia la visibilidad del panel de petición manual. Si el panel está visible, se ocultará; si está oculto, se mostrará.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnEnviarPeticion_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para enviar una petición manual.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de enviar petición).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método recoge el texto de la petición manual desde el campo de texto, valida si es válido y, si lo es,
            envía la petición utilizando el método `SendCustomPacketAsync` de la clase `Client`.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnCerrarSesion_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de cerrar sesión.
            Envia la solicitud de logout y abre la ventana de login.
            </summary>
            <param name="sender">El objeto que invoca el evento.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnAjustes_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de ajustes.
            Abre la ventana de ajustes.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.MinimizeButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de minimizar.
            Minimiza la ventana.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.MaximizeRestoreButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de maximizar/restaurar.
            Alterna el estado de la ventana entre maximizado y restaurado.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.CloseButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de cerrar.
            Cierra la ventana actual.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama cuando la ventana se ha cargado.
            Este método se puede utilizar para agregar lógica adicional al cargar la ventana.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.PowerButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón de apagado, solicitando la contraseña y enviando una solicitud de apagado al servidor.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón de apagado).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método muestra un cuadro de texto para que el usuario ingrese la contraseña de apagado. Si la contraseña
            es válida (no vacía), se envía una solicitud al servidor para apagarlo. Si no se ingresa la contraseña, muestra un error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.BtnIntroducirInfoSobre_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para introducir nueva información sobre el servidor.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método solicita al usuario que ingrese nueva información sobre el servidor a través de un cuadro de texto.
            Si el usuario no ingresa nada, muestra un mensaje de error. Si la información es válida, se envía al servidor.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.MainMenuView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AgendaEscritorio.view.UserManagementView">
            <summary>
            Ventana de gestión de usuarios. Permite realizar distintas acciones sobre los usuarios,
            como editar su nombre completo, fecha de nacimiento, otros datos, contraseña, y rol.
            </summary>
            <summary>
            UserManagementView
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.#ctor(AgendaEscritorio.service.Client)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AgendaEscritorio.view.UserManagementView"/>.
            </summary>
            <param name="client">Instancia del cliente que se usará para las comunicaciones con el servidor.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfigureEditMenu">
            <summary>
            Configura el menú de edición basado en los privilegios del usuario.
            Si el usuario es administrador, habilita la opción de cambiar la fecha de nacimiento.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnMostrarUsuarios_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el evento de clic en el botón para mostrar la lista de usuarios.
            </summary>
            <param name="sender">El objeto que genera el evento (el botón).</param>
            <param name="e">Los argumentos del evento.</param>
            <remarks>
            Este método solicita la lista de usuarios al servidor mediante una solicitud asíncrona.
            Si ocurre un error durante la solicitud, se muestra un mensaje de error.
            </remarks>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnEditarUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de editar usuario.
            Oculta el menú principal y muestra el menú de edición de usuario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CambiarNombreCompleto(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de cambiar el nombre completo del usuario.
            Muestra los campos de entrada para modificar el nombre completo.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CambiarFechaNacimiento(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de cambiar la fecha de nacimiento del usuario.
            Muestra los campos de entrada para modificar la fecha de nacimiento.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CambiarOtrosDatos(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de cambiar otros datos del usuario.
            Muestra los campos de entrada para modificar otros datos.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CambiarContrasena(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de cambiar la contraseña del usuario.
            Muestra los campos de entrada para modificar la contraseña.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.MostrarDatosUsuario(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de mostrar los datos del usuario.
            Muestra los campos de entrada para visualizar los datos del usuario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CambiarRol(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en la opción de cambiar el rol del usuario.
            Muestra el panel de creación de rol.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.HideAndClearInputFields">
            <summary>
            Oculta y limpia todos los campos de entrada en el formulario de gestión de usuario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCambios_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de confirmar cambios de nombre de usuario.
            Verifica que los campos estén completos y luego muestra un mensaje con la confirmación.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCambioNombreCompleto_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de confirmar el cambio de nombre completo.
            Valida que los campos estén completos y luego llama al cliente para realizar la solicitud de cambio de nombre.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCambioFechaNacimiento_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón de confirmar el cambio de fecha de nacimiento.
            Valida el formato y la validez de la fecha antes de realizar la solicitud de cambio.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCambioOtrosDatos_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para confirmar el cambio de otros datos de un usuario.
            Valida que los campos estén completos, realiza la solicitud de cambio de datos al servidor y muestra una confirmación.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.MostrarDatosUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para mostrar los datos de un usuario.
            Verifica que el campo de nombre de usuario no esté vacío y luego solicita los datos del usuario al servidor.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCambioContrasena_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para confirmar el cambio de contraseña.
            Valida que los campos estén completos y realiza la solicitud de cambio de contraseña al servidor.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnCrearUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para crear un nuevo usuario.
            Este evento oculta los paneles no relacionados y muestra el panel de creación de usuario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCreacionUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para confirmar la creación de un nuevo usuario.
            Valida los campos de entrada, solicita la creación del usuario al servidor, y limpia los campos después.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnEliminarUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para eliminar un usuario.
            Este evento oculta los paneles no relacionados y muestra el panel de eliminación de usuario.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarEliminacionUsuario_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para confirmar la eliminación de un usuario.
            Valida el nombre de usuario a eliminar, solicita la eliminación al servidor, y limpia los campos después.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnCrearRol_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el clic en el botón "Crear Rol". 
            Oculta el menú principal y muestra el panel de creación de rol.
            </summary>
            <param name="sender">El objeto que genera el evento (en este caso, el botón).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarCreacionRol_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el clic en el botón de confirmación para crear un nuevo rol.
            Valida los campos y llama al cliente para solicitar la creación del rol con los permisos seleccionados.
            </summary>
            <param name="sender">El objeto que genera el evento (en este caso, el botón).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="F:AgendaEscritorio.view.UserManagementView.rolesAndPermissions">
            <summary>
            Diccionario que almacena los roles y sus permisos asociados.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnMostrarPermisos_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el clic en el botón "Mostrar Permisos". 
            Oculta el menú principal y muestra el panel de permisos.
            </summary>
            <param name="sender">El objeto que genera el evento (en este caso, el botón).</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConsultarPermisosRol_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja el clic en el botón "Consultar Permisos de Rol". 
            Solicita los permisos del rol seleccionado y los muestra en un ComboBox.
            </summary>
            <param name="sender">El objeto que genera el evento (en este caso, el botón).</param>
            <param name="e">Argumentos del evento.</param>
            <exception cref="T:System.Exception">Se lanza si hay un error al obtener los permisos del rol.</exception>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.cmbRolesMostrarPermisos_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Maneja el cambio de selección en el ComboBox de roles para mostrar los permisos asociados.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el ComboBox.</param>
            <param name="e">Los argumentos del evento, que contienen información sobre la selección.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarEdicion_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Confirma la edición de los permisos para el rol seleccionado y actualiza el servidor.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón de confirmación.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnModoGestion_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Activa el modo gestión para el usuario actual.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón para activar el modo gestión.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnEliminarRol_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para mostrar el formulario de eliminación de rol.
            Muestra el panel para eliminar el rol y limpia el campo de texto.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.ConfirmarEliminarRol_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evento que se llama al hacer clic en el botón para confirmar la eliminación de un rol.
            Valida el campo de entrada, solicita la eliminación del rol al servidor, y limpia los campos después.
            </summary>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.BtnVolver_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja la acción del botón "Volver", cerrando la ventana actual o regresando a la vista anterior.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón "Volver".</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.MinimizeButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja la acción del botón para minimizar la ventana actual.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón de minimizar.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.MaximizeRestoreButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Alterna entre maximizar y restaurar la ventana actual según su estado.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón de maximizar/restaurar.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.CloseButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Maneja la acción del botón para cerrar la ventana actual.
            </summary>
            <param name="sender">El objeto que desencadena el evento, en este caso el botón de cerrar.</param>
            <param name="e">Los argumentos del evento.</param>
        </member>
        <member name="M:AgendaEscritorio.view.UserManagementView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:CryptographyService.#ctor">
            <summary>
            Constructor que inicializa el servicio de criptografía usando RSA con una clave de 3072 bits.
            </summary>
            <remarks>
            Este constructor crea una instancia de <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> con una longitud de clave de 3072 bits,
            que proporciona un nivel de seguridad más alto que la longitud estándar de 2048 bits. La clave se utiliza para operaciones 
            de cifrado y descifrado RSA.
            </remarks>
        </member>
        <member name="M:CryptographyService.GetPublicKey">
            <summary>
            Exporta la clave pública del servicio de criptografía en formato Base64.
            </summary>
            <returns>
            Una cadena que representa la clave pública en formato Base64, que puede ser enviada a un servidor.
            </returns>
            <remarks>
            Este método exporta la clave pública en formato X.509 (que es el estándar para las claves públicas) y la convierte
            en una cadena Base64. Además, muestra un cuadro de mensaje con la clave pública antes de devolverla.
            </remarks>
        </member>
        <member name="M:CryptographyService.ImportServerPublicKey(System.String)">
            <summary>
            Importa la clave pública del servidor a partir de una cadena en formato Base64.
            </summary>
            <param name="publicKeyBase64">
            La clave pública del servidor en formato Base64 que será importada.
            </param>
            <remarks>
            Este método convierte la clave pública en Base64 a un arreglo de bytes y luego intenta importar la clave pública
            en formato X.509 (PKCS#8) usando el algoritmo RSA. Si la importación es exitosa, se muestra un mensaje indicando
            que la clave pública se ha importado correctamente. En caso de error, se manejan excepciones específicas y se
            muestra un mensaje de error detallado.
            </remarks>
        </member>
        <member name="M:CryptographyService.EncryptDataWithClientKey(System.Byte[])">
            <summary>
            Encripta los datos con la clave pública del cliente (RSA).
            </summary>
            <param name="data">Datos a encriptar en formato de bytes.</param>
            <returns>Un arreglo de bytes que contiene los datos encriptados.</returns>
            <remarks>
            Este método utiliza la clave pública del cliente (RSA) para encriptar los datos proporcionados.
            Se aplica el esquema de padding PKCS#1 para garantizar la compatibilidad con el estándar de encriptación RSA.
            </remarks>
        </member>
        <member name="M:CryptographyService.DecryptDataWithPrivateKey(System.Byte[])">
            <summary>
            Desencripta los datos con la clave privada del cliente (RSA).
            </summary>
            <param name="encryptedData">Datos encriptados en formato de bytes.</param>
            <returns>Un arreglo de bytes que contiene los datos desencriptados.</returns>
            <remarks>
            Este método utiliza la clave privada del cliente (RSA) para desencriptar los datos proporcionados.
            Se aplica el esquema de padding PKCS#1 para garantizar la compatibilidad con el estándar de desencriptación RSA.
            </remarks>
        </member>
        <member name="M:CryptographyService.GenerateNewKeyPair">
            <summary>
            Genera un nuevo par de claves RSA si es necesario.
            </summary>
            <remarks>
            Este método inicializa un nuevo objeto RSACryptoServiceProvider con una longitud de clave de 3072 bits.
            La generación de nuevas claves RSA es útil cuando se necesita un nuevo par de claves (pública y privada) para la encriptación y desencriptación.
            </remarks>
        </member>
        <member name="M:CryptographyService.SetAESKey(System.Byte[])">
            <summary>
            Establece la clave AES para su uso en operaciones de encriptación y desencriptación.
            </summary>
            <param name="key">La clave AES que se va a establecer, representada como un arreglo de bytes.</param>
            <remarks>
            Este método valida que la clave no sea nula ni vacía, y luego almacena la clave AES en una variable interna.
            La clave AES se utiliza para encriptar o desencriptar datos con el algoritmo AES.
            Después de almacenar la clave, se muestra un mensaje con la clave en formato Base64.
            </remarks>
            <exception cref="T:System.ArgumentException">Lanzado si la clave AES es nula o vacía.</exception>
        </member>
        <member name="M:CryptographyService.GetAESKey">
            <summary>
            Obtiene la clave AES almacenada para su uso en operaciones de encriptación y desencriptación.
            </summary>
            <returns>La clave AES almacenada, representada como un arreglo de bytes.</returns>
            <remarks>
            Este método devuelve la clave AES que se ha almacenado previamente mediante el método <see cref="M:CryptographyService.SetAESKey(System.Byte[])"/>.
            Si la clave no ha sido establecida previamente, se lanzará una excepción <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Lanzado si la clave AES no ha sido establecida.</exception>
        </member>
        <member name="M:CryptographyService.EncryptDataWithAES(System.Byte[])">
            <summary>
            Encripta los datos proporcionados utilizando el algoritmo AES con una clave previamente establecida.
            </summary>
            <param name="data">Datos en formato de arreglo de bytes que serán cifrados.</param>
            <returns>Datos cifrados en formato de arreglo de bytes.</returns>
            <remarks>
            Este método utiliza el modo ECB (Electronic Codebook) de AES, sin IV (Vector de Inicialización), lo que implica que el mismo bloque de texto cifrado siempre generará la misma salida para los mismos datos de entrada.
            Se utiliza el padding PKCS7 para asegurar que los datos sean de un tamaño múltiplo del tamaño de bloque de AES (128 bits).
            </remarks>
            <exception cref="T:System.ArgumentNullException">Lanzado si los datos proporcionados son nulos.</exception>
        </member>
        <member name="M:CryptographyService.DecryptDataWithAES(System.Byte[])">
            <summary>
            Desencripta los datos proporcionados utilizando el algoritmo AES con una clave previamente establecida.
            </summary>
            <param name="data">Datos cifrados en formato de arreglo de bytes que serán desencriptados.</param>
            <returns>Datos desencriptados en formato de arreglo de bytes.</returns>
            <remarks>
            Este método utiliza el modo ECB (Electronic Codebook) de AES, sin IV (Vector de Inicialización), lo que implica que el mismo bloque de texto cifrado siempre generará la misma salida para los mismos datos de entrada.
            Se utiliza el padding PKCS7 para asegurar que los datos cifrados se ajusten a un tamaño múltiplo del tamaño de bloque de AES (128 bits).
            </remarks>
            <exception cref="T:System.ArgumentNullException">Lanzado si los datos proporcionados son nulos.</exception>
        </member>
    </members>
</doc>
